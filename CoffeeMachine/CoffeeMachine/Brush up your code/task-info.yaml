type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\
    \npublic class CoffeeMachine {\n    static int water = 400;\n    static int milk\
    \ = 540;\n    static int beans = 120;\n    static int cups = 9;\n    static int\
    \ money = 550;\n    \n    public static void main(String[] args) {\n        display();\n\
    \    }\n    \n    public static void canMake(int num) {\n        \n        if\
    \ (num == 1) {\n            System.out.println(\"I have enough resources, making\
    \ you a coffee!\\n\");\n        } \n    }\n    \n    public static void canMake(String\
    \ answer) {\n        if (answer.equals(\"espresso\")) {\n            if (CoffeeMachine.water\
    \ < 250) {\n                System.out.println(\"Sorry, not enough water!\\n\"\
    );\n            } else {\n                System.out.println(\"Sorry, not enough\
    \ beans!\\n\");\n            }\n        }\n        \n        else if (answer.equals(\"\
    latte\")) {\n            if (CoffeeMachine.water < 350) {\n                System.out.println(\"\
    Sorry, not enough water!\\n\");\n            } else if (CoffeeMachine.beans <\
    \ 20) {\n                System.out.println(\"Sorry, not enough beans!\\n\");\n\
    \            } else {\n                System.out.println(\"Sorry, not enough\
    \ milk!\\n\");\n            }\n        }\n        \n        else {\n         \
    \   if (CoffeeMachine.water < 200) {\n                System.out.println(\"Sorry,\
    \ not enough water!\\n\");\n            } else if (CoffeeMachine.beans < 12) {\n\
    \                System.out.println(\"Sorry, not enough beans!\\n\");\n      \
    \      } else {\n                System.out.println(\"Sorry, not enough milk!\\\
    n\");\n            }\n        }\n    }\n    \n    public static void display()\
    \ {\n        \n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Write action (buy, fill, take, remaining, exit):\\n \");\n        String answer\
    \ = sc.next();\n        \n        while (!answer.equals(\"exit\")) {\n       \
    \     switch (answer) {\n                case \"take\":\n                    take();\n\
    \                    break;\n                case \"fill\":\n                \
    \    fill();\n                    break;\n                case \"buy\":\n    \
    \                buy();\n                    break;\n                case \"remaining\"\
    :\n                    remaining();\n                    break;\n            }\n\
    \            System.out.println(\"Write action (buy, fill, take, remaining, exit):\\\
    n \");\n        }\n    }\n    \n    public static void take() {\n        System.out.printf(\"\
    I gave you $%d \\n\", money);\n        CoffeeMachine.money = 0;\n        System.out.println();\n\
    \    }\n    \n    public static void fill() {\n        int moreWater, moreMilk,\
    \ moreBeans, moreCups;\n        Scanner sc = new Scanner(System.in);\n       \
    \ System.out.println(\"Write how many ml of water do you want to add:\");\n  \
    \      moreWater = sc.nextInt();\n        System.out.println(\"Write how many\
    \ ml of milk do you want to add:\");\n        moreMilk = sc.nextInt();\n     \
    \   System.out.println(\"Write how many grams of coffee beans do you want to add:\"\
    );\n        moreBeans = sc.nextInt();\n        System.out.println(\"Write how\
    \ many disposable cups of coffee do you want to add:\");\n        moreCups = sc.nextInt();\n\
    \        \n        CoffeeMachine.water += moreWater;\n        CoffeeMachine.milk\
    \ += moreMilk;\n        CoffeeMachine.beans += moreBeans;\n        CoffeeMachine.cups\
    \ += moreCups;\n    }\n    \n    public static void buy() {\n        \n      \
    \  if (CoffeeMachine.cups < 1) {\n            System.out.println(\"Sorry, not\
    \ enough cups!\\n\");\n        } else {\n            int answer;\n           \
    \ Scanner sc = new Scanner(System.in);\n            System.out.println(\"What\
    \ do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\");\n         \
    \   answer = sc.nextInt();\n        \n            switch (answer) {\n        \
    \        case 1:\n                    espresso();\n                    break;\n\
    \                case 2:\n                    latte();\n                    break;\n\
    \                case 3:\n                    cappuccino();\n                \
    \    break;\n            }\n        }   \n    }\n    \n    public static void\
    \ espresso() {\n        if (CoffeeMachine.water >= 250 && CoffeeMachine.beans\
    \ >= 16) {\n            CoffeeMachine.money += 4;\n            canMake(1);\n \
    \       } else {\n            canMake(\"espresso\");\n        }\n        \n  \
    \  \n    }\n    \n    public static void latte() {\n        \n        if (CoffeeMachine.water\
    \ >= 350 && CoffeeMachine.beans >= 20 && CoffeeMachine.milk >= 75) {\n       \
    \     CoffeeMachine.money += 7;\n            canMake(1);\n        } else {\n \
    \           canMake(\"latte\");\n        }\n    }\n    \n    public static void\
    \ cappuccino() {\n        if (CoffeeMachine.water >= 200 && CoffeeMachine.beans\
    \ >= 12 && CoffeeMachine.milk >= 100) {\n            CoffeeMachine.money += 6;\n\
    \            canMake(1);\n        } else {\n            canMake(\"cappuccino\"\
    );\n        }\n    }\n    \n    public static void remaining() {\n        System.out.println();\n\
    \        System.out.printf(\"The coffee machine has:\\n%d of water\\n%d of milk\\\
    n%d of coffee beans\\n%d of disposable cups\\n%d of money\\n\"\n        , water,\
    \ milk, beans, cups, money);\n        System.out.println();\n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
